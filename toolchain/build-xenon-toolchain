#!/bin/bash

# originally written by Uwe Hermann <uwe@hermann-uwe.de>, released as public domain.
# changed for xenon by Felix Domke <tmbinc@elitedvb.net>, still public domain
# maintained, upgraded to gcc 10.3 by Fabrice Guilhaume <sfx.gligli@free.fr>, stays public domain

TARGET=xenon
PREFIX=/usr/local/xenon # Install location of your final toolchain
PARALLEL=

BINUTILS=binutils-2.31.1
GCC=gcc-10.3.0
NEWLIB=newlib-4.1.0

ZLIB=zlib-1.2.11
LIBPNG=libpng-1.5.30
BZIP2=bzip2-1.0.8
FREETYPE=freetype-2.4.12

BUILD_BINUTILS=true
BUILD_GCC=true
BUILD_NEWLIB=true
BUILD_GCC_SECOND=true

# path to the logfile
LOGFILE="`pwd`/build.log"

# variables to check if we are running a debian distribution
LSBRELEASE="`lsb_release -a 2> /dev/null`"
SEARCH_UBUNTU="Ubuntu"
SEARCH_DEBIAN="Debian"
DEB=false

# temp variables export
export DEVKITXENON="/usr/local/xenon"
export PATH="$PATH:\$DEVKITXENON/bin:\$DEVKITXENON/usr/bin"

function toolchain_install
{
        # Check if binutils sources are available, download it if needed
        if [ ! -f "$BINUTILS.tar.bz2" ]; then
                echo -e "Downloading $BINUTILS.tar.bz2"
                wget -c http://ftp.gnu.org/gnu/binutils/$BINUTILS.tar.bz2 || exit 0
        fi;

        # Check if gcc sources are available, download it if needed
        if [ ! -f "$GCC.tar.xz" ]; then
                echo -e "Downloading $GCC.tar.xz"
                wget -c ftp://ftp.gnu.org/gnu/gcc/$GCC/$GCC.tar.xz || exit 0
        fi;

        # Check if newlib sources are available, download it if needed
        if [ ! -f "$NEWLIB.tar.gz" ]; then
                echo -e "Downloading $NEWLIB.tar.gz"
                wget -c ftp://sourceware.org/pub/newlib/$NEWLIB.tar.gz || exit 0
        fi;

        # Delete previous toolchain directory
        rm -rf $PREFIX

        # Make working directory
        echo -e "Creating final xenon toolchain directory: $PREFIX"
        if [ ! -d $PREFIX ]; then
                mkdir $PREFIX
                chown -R `whoami`:`whoami` $PREFIX
        fi;

        # Prepare environment for building the toolchain
        export -n PATH="$PATH:\$DEVKITXENON/bin:\$DEVKITXENON/usr/bin"
        export PATH="$PATH:$PREFIX/bin"

        # Common flags for all ./configure scripts
        COMMON_CONFIGURE_FLAGS=" --enable-altivec --enable-lto "
        COMMON_CONFIGURE_FLAGS+="--with-cpu=cell --with-libiconv-prefix=/opt/local --with-gmp=/opt/local --with-mpfr=/opt/local "
        COMMON_CONFIGURE_FLAGS+="--disable-werror --disable-decimal-float --disable-nls --disable-shared --disable-linux-futex --disable-threads "
        COMMON_CONFIGURE_FLAGS+="--disable-libmudflap --disable-libssp --disable-libquadmath --disable-libgomp --disable-libitm "

        if $BUILD_BINUTILS; then
            echo -e "Extracting binutils..."
            tar xfj $BINUTILS.tar.bz2 >> $LOGFILE 2>&1 && cat binutils.diff | patch -p0 >> $LOGFILE 2>&1 || exit 0

            echo -e "Prepare building binutils..."
            rm -rf build_binutils
            mkdir build_binutils || exit 0
            pushd build_binutils >> $LOGFILE 2>&1 || exit 0

            echo -e "Configuring binutils..."
            ../$BINUTILS/configure --target=$TARGET --prefix=$PREFIX $COMMON_CONFIGURE_FLAGS \
                    --enable-multilib >> $LOGFILE 2>&1 || exit 0

            echo -e "Building binutils, this could take a while..."
            make $PARALLEL >> $LOGFILE 2>&1 || exit 0
            make install >> $LOGFILE 2>&1 || exit 0

            popd >> $LOGFILE 2>&1 || exit 0
            echo -e "Done"
        fi;

        if $BUILD_GCC; then
            echo -e "Extracting gcc..."
            tar xJf $GCC.tar.xz >> $LOGFILE 2>&1 && cat gcc.diff | patch -p0 >> $LOGFILE 2>&1 || exit 0

            echo -e "Prepare building gcc..."
            rm -rf build_gcc
            mkdir build_gcc || exit 0
            pushd build_gcc >> $LOGFILE 2>&1 || exit 0

            echo -e "Configuring gcc..."
            ../$GCC/configure --target=$TARGET --prefix=$PREFIX $COMMON_CONFIGURE_FLAGS \
                    --enable-languages=c --with-newlib --without-headers -enable-interwork \
                    --disable-libstdcxx-time --disable-libsanitizer --disable-libatomic >> $LOGFILE 2>&1 || exit 0

            echo -e "Building gcc, this could take a while..."
            make $PARALLEL all-gcc >> $LOGFILE 2>&1 || exit 0
            make install-gcc >> $LOGFILE 2>&1 || exit 0

            popd >> $LOGFILE 2>&1 || exit 0
            echo -e "Done"
        fi;

        if $BUILD_NEWLIB; then
            echo -e "Extracting newlib..."
            tar xfz $NEWLIB.tar.gz >> $LOGFILE 2>&1 && cat newlib.diff | patch -p0 >> $LOGFILE 2>&1 || exit 0

            echo -e "Prepare building newlib..."
            rm -rf build_newlib
            mkdir build_newlib || exit 0
            pushd build_newlib >> $LOGFILE 2>&1 || exit 0

            echo -e "Configuring newlib..."
            ../$NEWLIB/configure --target=$TARGET --prefix=$PREFIX $COMMON_CONFIGURE_FLAGS \
                    --enable-multilib \
                    --enable-newlib-io-long-long --enable-newlib-io-long-double >> $LOGFILE 2>&1 || exit 0

            echo -e "Building newlib, this could take a while..."
            make $PARALLEL >> $LOGFILE 2>&1 || exit 0
            make install >> $LOGFILE 2>&1 || exit 0

            popd >> $LOGFILE 2>&1 || exit 0
            echo -e "Done"
        fi;

        if $BUILD_GCC_SECOND; then
            # Yes, you need to build gcc again!

            echo -e "Prepare building gcc - 2nd pass..."
            rm -rf build_gcc_second
            mkdir build_gcc_second || exit 0
            pushd build_gcc_second >> $LOGFILE 2>&1 || exit 0

            echo -e "Configuring gcc - 2nd pass..."
            ../$GCC/configure --target=$TARGET --prefix=$PREFIX $COMMON_CONFIGURE_FLAGS \
                    --enable-languages=c,c++ --with-newlib \
                    --disable-libstdcxx-time --disable-libsanitizer --disable-libatomic >> $LOGFILE 2>&1 || exit 0

            echo -e "Building gcc - 2nd pass, this could take a while..."
            make $PARALLEL >> $LOGFILE 2>&1 || exit 0
            make install >> $LOGFILE 2>&1 || exit 0

            popd >> $LOGFILE 2>&1 || exit 0
            echo -e "Done"
        fi;

        # Prepare environment for using the toolchain
        rm -rf build_binutils build_gcc build_newlib build_gcc_second
        export PATH="$PATH:\$DEVKITXENON/bin:\$DEVKITXENON/usr/bin"
}

function zlib_install
{
    if [ ! -f "$ZLIB.tar.gz" ]; then
        echo -e "Downloading $ZLIB.tar.gz"
        wget -c http://zlib.net/$ZLIB.tar.gz || exit 0
    fi;

    echo -e "Extracting zlib..."
    rm -rf $ZLIB
    tar xzf $ZLIB.tar.gz >> $LOGFILE 2>&1 || exit 0
    cd $ZLIB

    export TARGET_SAVE=$TARGET
    export CC=$TARGET-gcc
    export CFLAGS="-mcpu=cell -mtune=cell -m32 -fno-pic -mpowerpc64 -L$DEVKITXENON/xenon/lib/32/ -T$DEVKITXENON/app.lds -u read -u _start -u exc_base -L$DEVKITXENON/usr/lib -I$DEVKITXENON/usr/include"
    export LDFLAGS="$CFLAGS"
    export TARGET=`gcc -v 2>&1 | sed -n '2p' | awk '{print $2}'`

    echo -e "Configuring zlib..."
    ./configure --prefix=$DEVKITXENON/usr >> $LOGFILE 2>&1 || exit 0

    sed '/cp $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir)/d' Makefile > Makefile.xenon

    echo -e "Building zlib..."
    make $PARALLEL -f Makefile.xenon CROSS_COMPILE=$TARGET- libz.a >> $LOGFILE 2>&1 || exit 0
    echo -e "Installing zlib..."
    make -f Makefile.xenon CROSS_COMPILE=$TARGET- install >> $LOGFILE 2>&1 || exit 0
    cd ..
    rm -rf $ZLIB

    export CC=""
    export CFLAGS=""
    export LDFLAGS=""
    export TARGET=$TARGET_SAVE

    echo -e "Done"
}

function libpng_install
{
    if [ ! -f "$LIBPNG.tar.xz" ]; then
        echo -e "Downloading $LIBPNG.tar.xz"
        wget -c http://download.sourceforge.net/libpng/$LIBPNG.tar.xz || exit 0
    fi;

    echo -e "Extracting libpng..."
    rm -rf $LIBPNG
    tar xJf $LIBPNG.tar.xz >> $LOGFILE 2>&1 || exit 0
    cd $LIBPNG

    export CC=$TARGET-gcc
    export CFLAGS="-mcpu=cell -mtune=cell -m32 -fno-pic -mpowerpc64 $DEVKITXENON/usr/lib/libxenon.a -L$DEVKITXENON/xenon/lib/32/ -T$DEVKITXENON/app.lds -u read -u _start -u exc_base -L$DEVKITXENON/usr/lib -I$DEVKITXENON/usr/include"
    export LDFLAGS="$CFLAGS"

    echo -e "Configuring libpng..."
    ./configure --disable-shared --enable-static --prefix=$DEVKITXENON/usr --host=ppc-elf >> $LOGFILE 2>&1 || exit 0

    echo -e "Building libpng..."
    make $PARALLEL CROSS_COMPILE=xenon- >> $LOGFILE 2>&1 || exit 0
    echo -e "Installing libpng..."
    make CROSS_COMPILE=xenon- install >> $LOGFILE 2>&1 || exit 0
    cd ..
    rm -rf $LIBPNG

        export CC=""
        export CFLAGS=""
        export LDFLAGS=""

    echo -e "Done"
}

function bzip2_install
{
    if [ ! -f "$BZIP2.tar.gz" ]; then
        echo -e "Downloading $BZIP2.tar.gz"
        wget -c ftp://sourceware.org/pub/bzip2/$BZIP2.tar.gz || exit 0
    fi;

    echo -e "Extracting bzip2..."
    rm -rf $BZIP2
    tar xzf $BZIP2.tar.gz >> $LOGFILE 2>&1 && cat ../libxenon/ports/bzip2/bzip2.diff | patch -p0 >> $LOGFILE 2>&1 || exit 0
    cd $BZIP2

    echo -e "Building bzip2..."
    make $PARALLEL >> $LOGFILE 2>&1 || exit 0
    echo -e "Installing bzip2..."
    make install >> $LOGFILE 2>&1 || exit 0
    cd ..
    rm -rf $BZIP2
    echo -e "Done"
}

function freetype_install
{
    if [ ! -f "$FREETYPE.tar.gz" ]; then
        echo -e "Downloading $FREETYPE.tar.gz"
        wget -c http://download.savannah.gnu.org/releases/freetype/$FREETYPE.tar.gz || exit 0
    fi;

    echo -e "Extracting freetype..."
    rm -rf $FREETYPE
    tar xzf $FREETYPE.tar.gz >> $LOGFILE 2>&1 || exit 0
    cd $FREETYPE

    export CC=$TARGET-gcc
    export CFLAGS="-mcpu=cell -mtune=cell -m32 -fno-pic -mpowerpc64 $DEVKITXENON/usr/lib/libxenon.a -L$DEVKITXENON/xenon/lib/32/ -T$DEVKITXENON/app.lds -u read -u _start -u exc_base -L$DEVKITXENON/usr/lib -I$DEVKITXENON/usr/include"
    export LDFLAGS="$CFLAGS"

    echo -e "Configuring freetype..."
    ./configure --prefix=$DEVKITXENON/usr --host=ppc-elf --disable-shared >> $LOGFILE 2>&1 || exit 0

    echo -e "Building freetype..."
    make $PARALLEL CROSS_COMPILE=xenon- >> $LOGFILE 2>&1 || exit 0
    echo -e "Installing freetype..."
    make CROSS_COMPILE=xenon- install >> $LOGFILE 2>&1 || exit 0
    cd ..
    rm -rf $FREETYPE

    export CC=""
    export CFLAGS=""
    export LDFLAGS=""

    echo -e "Done"
}

function filesystems_install
{
    echo -e "Building Filesystems..."

    filesystems="fat-xenon ntfs-xenon ext2fs-xenon xtaflib"

    for i in $filesystems
    do
        echo -e -n "$i: "
        if [ ! -d $i ]; then
            echo -e -n "Cloning... "
            git clone https://github.com/LibXenonProject/$i.git  >> $LOGFILE 2>&1 || exit 0
        else
            cd $i
            git remote update >> $LOGFILE 2>&1
            git status -uno | grep -q behind
            if [ 0 -eq $? ]; then
                echo -e -n "Updating... "
                git pull >> $LOGFILE 2>&1
                make clean >> $LOGFILE 2>&1
			fi
            cd ..
        fi;
        echo -e -n "Building... "
        make -C $i >> $LOGFILE 2>&1 || exit 0
        echo -e -n "Installing... "
        make -C $i install >> $LOGFILE 2>&1 || exit 0
        echo -e "Done"
    done
}

function bin2s_install
{
    pushd ../libxenon/ports/xenon/
    echo -e "Building bin2s..."
    gcc bin2s.c -o bin2s || exit 0
    echo -e "Installing bin2s..."
    mv bin2s $DEVKITXENON/bin
    chmod a+x $DEVKITXENON/bin/bin2s
    echo -e "Done"
    popd
}

# function to compile and install libxenon
function libxenon_install
{
        echo -e "Building libxenon..."
        make -C ../libxenon/ports/xenon clean >> $LOGFILE 2>&1 || exit 0
        make -C ../libxenon/ports/xenon libxenon.a >> $LOGFILE 2>&1 || exit 0
        make -C ../libxenon/ports/xenon install >> $LOGFILE 2>&1 || exit 0
        echo
        echo -e "libxenon installed successfully"
        echo
}

function cube
{
    rm cube.elf32 &>/dev/null
    rm cube.elf &>/dev/null

    echo -e "Building Cube Sample..."
    make -C ../devkitxenon/examples/xenon/graphics/cube >> $LOGFILE 2>&1 || exit 0
    cp ../devkitxenon/examples/xenon/graphics/cube/cube.elf32 cube.elf
    echo
    echo -e "cube.elf compiled, run it via xell"
    echo

	exit 0
}

function all_done
{
    RED='\e[0;31m'
    NC='\e[0m'

    echo
    echo -e "All done, your xenon toolchain is located here : $PREFIX"
    echo
    echo -e "${RED}Please add the following path to your login script (~/.bashrc)"
    echo
    echo -e "export DEVKITXENON=\"/usr/local/xenon\""
    echo -e "export PATH=\"\$PATH:\$DEVKITXENON/bin:\$DEVKITXENON/usr/bin\""
    echo -e "${NC}"
}

function check_debian
{
    if `echo $LSBRELEASE | grep "$SEARCH_UBUNTU" >> $LOGFILE 2>&1`
    then
        DEB=true
	fi

    if `echo $LSBRELEASE | grep "$SEARCH_DEBIAN" >> $LOGFILE 2>&1`
    then
        DEB=true
	fi
}

function check_build-essential
{
    echo -e "Ubuntu or Debian is detected."
    dpkg -s build-essential >> $LOGFILE 2>&1

    if [ $? -eq 1 ]; then
        echo -e "The build-essential package was not detected on your system"
        echo -e "To build the toolchain you need to download and install the build-essential package."
        echo -e "Do you want this script to do it for you ? (y/n)"
        read answer >> $LOGFILE 2>&1
        if [ "$answer" == "y" ]; then
            echo -e "Please wait while installing build-essential..."
            sudo apt-get install build-essential >> $LOGFILE 2>&1
		fi
	else
        echo -e "The build-essential package was detected on your system"
	fi
}

# start
rm $LOGFILE &>/dev/null

if [ "$1" == "toolchain" ]; then
    check_debian
    if $DEB; then
    check_build-essential
    fi
    toolchain_install
    all_done
elif [ "$1" == "libxenon" ]; then
    libxenon_install
elif [ "$1" == "libs" ]; then
    zlib_install
    bzip2_install
    libpng_install
    filesystems_install
    freetype_install
    bin2s_install
elif [ "$1" == "zlib" ]; then
    zlib_install
elif [ "$1" == "bzip2" ]; then
    bzip2_install
elif [ "$1" == "libpng" ]; then
    libpng_install
elif [ "$1" == "filesystems" ]; then
    filesystems_install
elif [ "$1" == "freetype" ]; then
    freetype_install
elif [ "$1" == "bin2s" ]; then
        bin2s_install
elif [ "$1" == "cube" ]; then
    cube
else
    echo -e "Xbox360 Xenon (cpu) toolchain builder."
    echo -e "Versions: $GCC; $BINUTILS; $NEWLIB."
    echo
    echo -e "Usage:"
    echo -e "\"$0 toolchain\" (install toolchain)"
    echo -e "\"$0 libs\" (install libraries seen below + bin2s)"
    echo -e "\"$0 libxenon\" (install libxenon)"
    echo -e "\"$0 zlib\" (install zlib)"
    echo -e "\"$0 bzip2\" (install bzip2)"
    echo -e "\"$0 libpng\" (install libpng)"
    echo -e "\"$0 filesystems\" (install libxenon filesystems)"
    echo -e "\"$0 freetype\" (install freetype)"
    echo -e "\"$0 bin2s\" (install bin2s)"
    echo -e "\"$0 cube\" (compile the cube sample)"
    echo
    exit 0
fi;
